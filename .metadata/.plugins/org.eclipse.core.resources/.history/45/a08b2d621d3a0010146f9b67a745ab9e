package org.ms.authentificationservice.securite;

import org.ms.authentificationservice.entities.AppUser;
import org.ms.authentificationservice.filtres.JwtAuthenticationFilter;
import org.ms.authentificationservice.filtres.JwtAuthorizationFilter;
import org.ms.authentificationservice.services.UserService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; // MODERN REPLACEMENT
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; // Add this for password encoding
import org.springframework.security.crypto.password.PasswordEncoder; // Add this
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import java.util.ArrayList;
import java.util.Collection;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true, securedEnabled = true) // Recommended for @PreAuthorize/@PostAuthorize and @Secured
public class SecurityConfig {

	private final UserService userService; // Use final for injected dependencies
    private final AuthenticationConfiguration authenticationConfiguration; // Inject AuthenticationConfiguration

	public SecurityConfig(UserService userService, AuthenticationConfiguration authenticationConfiguration) {
		this.userService = userService;
        this.authenticationConfiguration = authenticationConfiguration;
	}

    // Define the UserDetailsService as a bean for Spring Security to pick up
    @Bean
    public UserDetailsService userDetailsService() {
        return new UserDetailsService() {
            @Override
            public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
                AppUser appUser = userService.getUserByName(username);
                if (appUser == null) {
                    throw new UsernameNotFoundException("User not found with username: " + username);
                }
                Collection<GrantedAuthority> permissions = new ArrayList<>();
                appUser.getRoles().forEach(r -> {
                    permissions.add(new SimpleGrantedAuthority(r.getRoleName()));
                });
                return new User(appUser.getUsername(), appUser.getPassword(), permissions);
            }
        };
    }

 

    // Define the AuthenticationManager bean
	@Bean
	public AuthenticationManager authenticationManager() throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.csrf(csrf -> csrf.disable()); // Disable CSRF
		http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)); // Stateless sessions
		http.headers(headers -> headers.frameOptions(frameOptions -> frameOptions.disable())); // For H2 console

		http.authorizeHttpRequests(auth -> auth
            // ALLOW /auth/login for unauthenticated access (CRITICAL FIX)
            .requestMatchers("/auth/login").permitAll()
            // Permit refresh token endpoint
            // Assuming your UserServiceREST has @GetMapping(path="/refreshToken") which means it would be /auth/refreshToken
            .requestMatchers("/auth/refreshToken").permitAll()
            // Permit H2 console for development
            .requestMatchers("/h2-console/**").permitAll()
            // All other requests require authentication
            .anyRequest().authenticated()
        );

        // Add JwtAuthenticationFilter
        // It's crucial to pass the authenticationManager bean here
		http.addFilter(new JwtAuthenticationFilter(authenticationManager()));

        // Add JwtAuthorizationFilter for validating tokens on subsequent requests
		http.addFilterBefore(new JwtAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class);

		return http.build();
	}
}
package org.ms.factureservice.web;

import lombok.RequiredArgsConstructor;
import org.ms.factureservice.entities.Facture;
import org.ms.factureservice.entities.FactureLigne;
import org.ms.factureservice.feign.ClientServiceClient;
import org.ms.factureservice.feign.ProduitServiceClient;
import org.ms.factureservice.model.Client;
import org.ms.factureservice.model.Produit;
import org.ms.factureservice.repository.FactureLigneRepository;
import org.ms.factureservice.repository.FactureRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/factures")
@RequiredArgsConstructor
public class FactureRestController {

    private final FactureRepository factureRepository;
    private final FactureLigneRepository factureLigneRepository;
    private final ClientServiceClient clientServiceClient;
    private final ProduitServiceClient produitServiceClient;

    // ✅ Get all factures
    @GetMapping
    public List<Facture> getAllFactures() {
        List<Facture> factures = factureRepository.findAll();
        factures.forEach(facture -> {
            Client client = clientServiceClient.findClientById(facture.getClientID());
            facture.setClient(client);
        });
        return factures;
    }

    // ✅ Get a single facture with details
    @GetMapping("/{id}")
    public Facture getFactureById(@PathVariable Long id) {
        Facture facture = factureRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Facture not found with id " + id));
        facture.setClient(clientServiceClient.findClientById(facture.getClientID()));

        // enrich facture lines
        facture.getFactureLignes().forEach(ligne -> {
            Produit produit = produitServiceClient.findProductById(ligne.getProduitID());
            ligne.setProduit(produit);
        });

        return facture;
    }

    // ✅ Create a new facture
    @PostMapping
    public Facture createFacture(@RequestBody Facture facture) {
        return factureRepository.save(facture);
    }

    // ✅ Add a line to a facture
    @PostMapping("/{factureId}/lignes")
    public FactureLigne addLigneToFacture(@PathVariable Long factureId, @RequestBody FactureLigne ligne) {
        Facture facture = factureRepository.findById(factureId)
                .orElseThrow(() -> new RuntimeException("Facture not found"));
        ligne.setFacture(facture);
        return factureLigneRepository.save(ligne);
    }

    // ✅ Get all lines of a facture
    @GetMapping("/{factureId}/lignes")
    public List<FactureLigne> getFactureLignes(@PathVariable Long factureId) {
        List<FactureLigne> lignes = (List<FactureLigne>) factureLigneRepository.findByFactureId(factureId);
        lignes.forEach(ligne -> {
            Produit produit = produitServiceClient.findProductById(ligne.getProduitID());
            ligne.setProduit(produit);
        });
        return lignes;
    }

    // ✅ Delete facture
    @DeleteMapping("/{id}")
    public void deleteFacture(@PathVariable Long id) {
        factureRepository.deleteById(id);
    }
}

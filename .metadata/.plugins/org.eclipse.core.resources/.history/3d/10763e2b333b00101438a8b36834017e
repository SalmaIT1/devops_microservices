package org.ms.clientservice.web;

import lombok.RequiredArgsConstructor;

import org.ms.clientservice.entities.Client;
import org.ms.clientservice.repository.ClientRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
@RestController
@RequestMapping("/clients")
@RequiredArgsConstructor
public class ClientRestController {
    private final ClientRepository clientRepository;

    // GET all clients - accessible by USER and ADMIN
    @GetMapping
    public List<Client> getAllClients() {
        return clientRepository.findAll();
    }

    // GET client by ID - accessible by USER and ADMIN
    @GetMapping("/{id}")
    public Client getClientById(@PathVariable Long id) {
        return clientRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Client not found with id " + id));
    }

    // GET clients by name with pagination - accessible by USER and ADMIN
    @GetMapping("/search")
    public Page<Client> searchClientsByName(
            @RequestParam(name = "name", defaultValue = "") String name,
            @RequestParam(name = "page", defaultValue = "0") int page,
            @RequestParam(name = "size", defaultValue = "5") int size
    ) {
        return clientRepository.findByNameContains(name, PageRequest.of(page, size));
    }

    // POST - only ADMIN can add
    @PostMapping
    public Client saveClient(@RequestBody Client client) {
        return clientRepository.save(client);
    }

    // PUT - only ADMIN can update
    @PutMapping("/{id}")
    public Client updateClient(@PathVariable Long id, @RequestBody Client client) {
        Client existingClient = clientRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Client not found with id " + id));
        existingClient.setName(client.getName());
        existingClient.setEmail(client.getEmail());
        return clientRepository.save(existingClient);
    }

    // DELETE - only ADMIN can delete
    @DeleteMapping("/{id}")
    public void deleteClient(@PathVariable Long id) {
        clientRepository.deleteById(id);
    }
}